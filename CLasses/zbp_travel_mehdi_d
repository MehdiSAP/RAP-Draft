CLASS zbp_travel_mehdi_d DEFINITION PUBLIC ABSTRACT FINAL FOR BEHAVIOR OF zr_travel_mehdi_d.
ENDCLASS.

CLASS zbp_travel_mehdi_d IMPLEMENTATION.
ENDCLASS.


CLASS lhc_ZR_TRAVEL_MEHDI_D DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.
    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR zr_travel_mehdi_d RESULT result.
    METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION
      IMPORTING REQUEST requested_authorizations FOR zr_travel_mehdi_d RESULT result.
    METHODS precheck_create FOR PRECHECK
      IMPORTING entities FOR CREATE zr_travel_mehdi_d.

    METHODS precheck_update FOR PRECHECK
      IMPORTING entities FOR UPDATE zr_travel_mehdi_d.
    METHODS accepttravel FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_mehdi_d~accepttravel RESULT result.

    METHODS deductdiscout FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_mehdi_d~deductdiscout RESULT result.

    METHODS recalctotalprice FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_mehdi_d~recalctotalprice.

    METHODS rejecttravel FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_mehdi_d~rejecttravel RESULT result.
    METHODS calctotalprice FOR DETERMINE ON MODIFY
      IMPORTING keys FOR zr_travel_mehdi_d~calctotalprice.

    METHODS setstatusopen FOR DETERMINE ON MODIFY
      IMPORTING keys FOR zr_travel_mehdi_d~setstatusopen.

    METHODS settravelid FOR DETERMINE ON SAVE
      IMPORTING keys FOR zr_travel_mehdi_d~settravelid.
    METHODS validatecustomer FOR VALIDATE ON SAVE
      IMPORTING keys FOR zr_travel_mehdi_d~validatecustomer.
    METHODS activate FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_mehdi_d~activate.

    METHODS discard FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_mehdi_d~discard.

    METHODS edit FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_mehdi_d~edit.

    METHODS resume FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_mehdi_d~resume.

ENDCLASS.


CLASS lhc_ZR_TRAVEL_MEHDI_D IMPLEMENTATION.
  METHOD get_instance_authorizations.
*    READ ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
*    ENTITY zr_travel_mehdi_d
*    FIELDS ( AgencyID )
*    WITH CORRESPONDING #( keys )
*    RESULT DATA(lt_travel)
*    FAILED failed.
*
*    CHECK lt_travel IS NOT INITIAL.
*
*    SELECT FROM /dmo/agency
*                FIELDS DISTINCT agency_id, country_code
*                FOR ALL ENTRIES IN @lt_travel
*                WHERE agency_id = @lt_travel-AgencyID
*                INTO TABLE @DATA(lt_agency_ctry).
*
*    LOOP AT lt_travel ASSIGNING FIELD-SYMBOL(<ls_travel>).
*
*      READ TABLE lt_agency_ctry ASSIGNING FIELD-SYMBOL(<ls_agency_ctry>) WITH KEY agency_id = <ls_travel>-AgencyID.
*      IF sy-subrc <> 0.
*        INSERT VALUE #( traveluuid = <ls_travel>-TravelUUID %update = if_abap_behv=>auth-unauthorized %delete = if_abap_behv=>auth-unauthorized )
*               INTO TABLE result.
*        INSERT VALUE #( %key = <ls_travel>-%key
*                %msg = NEW /dmo/cm_flight_messages( textid = /dmo/cm_flight_messages=>not_authorized_for_agencyid
*                                                    severity = if_abap_behv_message=>severity-error )
*                %element-agencyid =  if_abap_behv=>mk-on )
*                INTO TABLE reported-zr_travel_mehdi_d.
*      ELSE.
*
*        IF requested_authorizations-%update = if_abap_behv=>mk-on.
*          AUTHORITY-CHECK OBJECT '/DMO/TRVL'
*            ID '/DMO/CNTRY' FIELD <ls_agency_ctry>-country_code
*            ID 'ACTVT' FIELD '02'.
*          DATA(lv_update_auth) = COND abp_behv_auth( WHEN sy-subrc = 0 THEN if_abap_behv=>auth-allowed
*                                                     ELSE  if_abap_behv=>auth-unauthorized ).
*          IF lv_update_auth = if_abap_behv=>auth-unauthorized.
*            INSERT VALUE #( %key = <ls_travel>-%key
*                            %msg = NEW /dmo/cm_flight_messages( textid = /dmo/cm_flight_messages=>not_authorized_for_agencyid
*                                                                severity = if_abap_behv_message=>severity-error )
*                            %element-agencyid =  if_abap_behv=>mk-on )
*                            INTO TABLE reported-zr_travel_mehdi_d.
*          ENDIF.
*        ENDIF.
*
*        IF requested_authorizations-%delete = if_abap_behv=>mk-on.
*          AUTHORITY-CHECK OBJECT '/DMO/TRVL'
*              ID '/DMO/CNTRY' FIELD <ls_agency_ctry>-country_code
*              ID 'ACTVT' FIELD '03'.
*          DATA(lv_delete_auth) = COND abp_behv_auth( WHEN sy-subrc = 0 THEN if_abap_behv=>auth-allowed
*                                                       ELSE  if_abap_behv=>auth-unauthorized ).
*          IF lv_delete_auth = if_abap_behv=>auth-unauthorized.
*            INSERT VALUE #( %key = <ls_travel>-%key
*                            %msg = NEW /dmo/cm_flight_messages( textid = /dmo/cm_flight_messages=>not_authorized_for_agencyid
*                                                                severity = if_abap_behv_message=>severity-error )
*                            %element-agencyid =  if_abap_behv=>mk-on )
*                            INTO TABLE reported-zr_travel_mehdi_d.
*          ENDIF.
*        ENDIF.
*
*        INSERT VALUE #( traveluuid = <ls_travel>-TravelUUID %update = lv_update_auth %delete = lv_delete_auth )
*               INTO TABLE result.
*      ENDIF.
*
*    ENDLOOP.
  ENDMETHOD.

  METHOD get_global_authorizations.
*    IF requested_authorizations-%create = if_abap_behv=>mk-on.
*
*      AUTHORITY-CHECK OBJECT '/DMO/TRVL'
*          ID '/DMO/CNTRY' DUMMY
*          ID 'ACTVT' FIELD '01'.
*          result-%create = COND #( WHEN sy-subrc = 0 THEN if_abap_behv=>auth-allowed
*                                                     ELSE  if_abap_behv=>auth-unauthorized ).
*    ENDIF.
*
*    IF requested_authorizations-%update = if_abap_behv=>mk-on.
*      AUTHORITY-CHECK OBJECT '/DMO/TRVL'
*        ID '/DMO/CNTRY' DUMMY
*        ID 'ACTVT' FIELD '02'.
*        result-%update = COND #( WHEN sy-subrc = 0 THEN if_abap_behv=>auth-allowed
*                                                     ELSE  if_abap_behv=>auth-unauthorized ).
*    ENDIF.
*
*    IF requested_authorizations-%delete = if_abap_behv=>mk-on.
*      AUTHORITY-CHECK OBJECT '/DMO/TRVL'
*          ID '/DMO/CNTRY' DUMMY
*          ID 'ACTVT' FIELD '03'.
*          result-%delete = COND #( WHEN sy-subrc = 0 THEN if_abap_behv=>auth-allowed
*                                                     ELSE  if_abap_behv=>auth-unauthorized ).
*    ENDIF.
  ENDMETHOD.

  METHOD precheck_create.
  ENDMETHOD.

  METHOD precheck_update.
    " --------------------
    RETURN.
    " --------------------
    DATA lt_agency TYPE SORTED TABLE OF /dmo/agency WITH UNIQUE KEY agency_id.

    lt_agency = CORRESPONDING #( entities DISCARDING DUPLICATES MAPPING agency_id = AgencyID EXCEPT * ).

    IF lt_agency IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM /dmo/agency
      FIELDS agency_id,country_code
      FOR ALL ENTRIES IN @lt_agency
      WHERE agency_id = @lt_agency-agency_id
      INTO TABLE @DATA(lt_ag_ct).
    IF sy-subrc IS NOT INITIAL.
      RETURN.
    ENDIF.

    LOOP AT entities INTO DATA(ls_entity).

      ASSIGN lt_ag_ct[ agency_id = ls_entity-AgencyID ] TO FIELD-SYMBOL(<ls_age_ctry>).

      AUTHORITY-CHECK OBJECT '/DMO/TRVL'
                      ID '/DMO/CNTRY' FIELD <ls_age_ctry>-country_code
                      ID 'ACTVT' FIELD '02'.

      IF sy-subrc IS NOT INITIAL.
        failed-zr_travel_mehdi_d = VALUE #( ( %tky = ls_entity-%tky ) ).
        APPEND VALUE #( %tky              = ls_entity-%tky
                        %msg              = NEW /dmo/cm_flight_messages(
                                                    textid    = /dmo/cm_flight_messages=>not_authorized_for_agencyid
                                                    agency_id = ls_entity-AgencyID
                                                    severity  = if_abap_behv_message=>severity-error )
                        %element-AgencyID = if_abap_behv=>mk-on )
               TO reported-zr_travel_mehdi_d.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.

  METHOD acceptTravel.
    " Modify travel instance
    MODIFY ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
           ENTITY zr_travel_mehdi_d
           UPDATE FIELDS ( OverallStatus )
           WITH VALUE #( FOR key IN keys
                         ( %tky          = key-%tky
                           OverallStatus = 'A' ) ).

    " Read changed data for action result
    READ ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
         ENTITY zr_travel_mehdi_d
         ALL FIELDS WITH
         CORRESPONDING #( keys )
         RESULT DATA(lt_travels).

    result = VALUE #( FOR travel IN lt_travels
                      ( %tky   = travel-%tky
                        %param = travel ) ).
  ENDMETHOD.

  METHOD deductDiscout.
    DATA lt_travel_upd TYPE TABLE FOR UPDATE zr_travel_mehdi_d.

    DATA(lt_keys) = keys.

    LOOP AT lt_keys ASSIGNING FIELD-SYMBOL(<ls_key>) WHERE    %param-Discount IS INITIAL
                                                           OR %param-Discount  > 100
                                                           OR %param-Discount  < 0.
      APPEND VALUE #( %tky = <ls_key>-%tky ) TO failed-zr_travel_mehdi_d.
      APPEND VALUE #(
          %tky                  = <ls_key>-%tky
          %msg                  = NEW /dmo/cm_flight_messages( textid   = /dmo/cm_flight_messages=>discount_invalid
                                                               severity = if_abap_behv_message=>severity-error )
          %element-bookingfee   = if_abap_behv=>mk-on
          %action-deductdiscout = if_abap_behv=>mk-on )
             TO reported-zr_travel_mehdi_d.
      DELETE lt_keys.
    ENDLOOP.

    IF lt_keys IS INITIAL.
      RETURN.
    ENDIF.

    READ ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
         ENTITY zr_travel_mehdi_d
         FIELDS ( BookingFee )
         WITH CORRESPONDING #( lt_keys )
         RESULT DATA(lt_travel).

    LOOP AT lt_travel ASSIGNING FIELD-SYMBOL(<ls_travel>).
      DATA(lv_discount) = lt_keys[ KEY id
                                   %tky = <ls_travel>-%tky ]-%param-Discount.
      INSERT VALUE #( %tky       = <ls_travel>-%tky
                      BookingFee = ( <ls_travel>-BookingFee - ( ( <ls_travel>-BookingFee * lv_discount ) / 100 ) ) )
             INTO TABLE lt_travel_upd.
    ENDLOOP.

    MODIFY ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
           ENTITY zr_travel_mehdi_d UPDATE FIELDS ( BookingFee )
           WITH lt_travel_upd.

    READ ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
         ENTITY zr_travel_mehdi_d
         ALL FIELDS  WITH CORRESPONDING #( lt_keys )
         RESULT DATA(lt_modified_travel).

    result = VALUE #( FOR ls_modified_travel IN lt_modified_travel
                      ( %tky = ls_modified_travel-%tky %param = ls_modified_travel  ) ).
  ENDMETHOD.

  METHOD recalcTotalPrice.
    TYPES: BEGIN OF ty_amount_per_currencycode,
             amount        TYPE /dmo/total_price,
             currency_code TYPE /dmo/currency_code,
           END OF ty_amount_per_currencycode.

    DATA lt_amt_per_ccode TYPE STANDARD TABLE OF ty_amount_per_currencycode.

    "
    " Read all relevant travel instances.
    READ ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
         ENTITY zr_travel_mehdi_d
         FIELDS ( BookingFee CurrencyCode )
         WITH CORRESPONDING #( keys )
         RESULT DATA(lt_travels).

    DELETE lt_travels WHERE CurrencyCode IS INITIAL.

    LOOP AT lt_travels ASSIGNING FIELD-SYMBOL(<travel>).
      " Set the start for the calculation by adding the booking fee.
      lt_amt_per_ccode = VALUE #( ( amount        = <travel>-BookingFee
                                    currency_code = <travel>-CurrencyCode ) ).

      " Read all associated bookings and add them to the total price.
      READ ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
           ENTITY zr_travel_mehdi_d BY \_Booking
           FIELDS ( FlightPrice CurrencyCode )
           WITH VALUE #( ( %tky = <travel>-%tky ) )
           RESULT DATA(lt_bookings).

      LOOP AT lt_bookings INTO DATA(booking) WHERE CurrencyCode IS NOT INITIAL.
        COLLECT VALUE ty_amount_per_currencycode( amount        = booking-FlightPrice
                                                  currency_code = booking-CurrencyCode ) INTO lt_amt_per_ccode.
      ENDLOOP.

      " Read all associated booking supplements and add them to the total price.
      READ ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
           ENTITY zr_booking_mehdi_d BY \_BookingSupplement
           FIELDS ( BookSupplPrice CurrencyCode )
           WITH VALUE #( FOR rba_booking IN lt_bookings
                         ( %tky = rba_booking-%tky ) )
           RESULT DATA(lt_bookingsupplements).

      LOOP AT lt_bookingsupplements INTO DATA(bookingsupplement) WHERE CurrencyCode IS NOT INITIAL.
        COLLECT VALUE ty_amount_per_currencycode( amount        = bookingsupplement-BookSupplPrice
                                                  currency_code = bookingsupplement-CurrencyCode ) INTO lt_amt_per_ccode.
      ENDLOOP.

      CLEAR <travel>-TotalPrice.
      LOOP AT lt_amt_per_ccode INTO DATA(single_amount_per_currencycode).
        " If needed do a Currency Conversion
        IF single_amount_per_currencycode-currency_code = <travel>-CurrencyCode.
          <travel>-TotalPrice += single_amount_per_currencycode-amount.
        ELSE.
          /dmo/cl_flight_amdp=>convert_currency(
            EXPORTING iv_amount               = single_amount_per_currencycode-amount
                      iv_currency_code_source = single_amount_per_currencycode-currency_code
                      iv_currency_code_target = <travel>-CurrencyCode
                      iv_exchange_rate_date   = cl_abap_context_info=>get_system_date( )
            IMPORTING ev_amount               = DATA(total_booking_price_per_curr) ).
          <travel>-TotalPrice += total_booking_price_per_curr.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    " write back the modified total_price of travels
    MODIFY ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
           ENTITY zr_travel_mehdi_d
           UPDATE FIELDS ( TotalPrice )
           WITH CORRESPONDING #( lt_travels ).
  ENDMETHOD.

  METHOD rejectTravel.
    " Modify travel instance
    MODIFY ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
           ENTITY zr_travel_mehdi_d
           UPDATE FIELDS ( OverallStatus )
           WITH VALUE #( FOR key IN keys
                         ( %tky          = key-%tky
                           OverallStatus = 'X' ) ).

    " Read changed data for action result
    READ ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
         ENTITY zr_travel_mehdi_d
         ALL FIELDS WITH
         CORRESPONDING #( keys )
         RESULT DATA(lt_travels).

    result = VALUE #( FOR travel IN lt_travels
                      ( %tky   = travel-%tky
                        %param = travel ) ).
  ENDMETHOD.

  METHOD calcTotalPrice.
    MODIFY ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
           ENTITY zr_travel_mehdi_d
           EXECUTE recalcTotalPrice
           FROM CORRESPONDING #( keys ).
  ENDMETHOD.

  METHOD setStatusOpen.
    READ ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
         ENTITY zr_travel_mehdi_d
         FIELDS ( OverallStatus )
         WITH CORRESPONDING #( keys )
         RESULT DATA(lt_travels).

    DELETE lt_travels WHERE OverallStatus IS NOT INITIAL.

    IF lt_travels IS INITIAL.
      RETURN.
    ENDIF.

    MODIFY ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
           ENTITY zr_travel_mehdi_d
           UPDATE FIELDS ( OverallStatus )
           WITH VALUE #( FOR ls_travel IN lt_travels
                         ( %tky          = ls_travel-%tky
                           OverallStatus = 'O' ) ).
  ENDMETHOD.

  METHOD setTravelId.
    READ ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
         ENTITY zr_travel_mehdi_d
         FIELDS ( TravelID )
         WITH CORRESPONDING #( keys )
         RESULT DATA(lt_travels).

    DELETE lt_travels WHERE TravelID IS NOT INITIAL.

    IF lt_travels IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM /dmo/a_travel_d FIELDS MAX( travel_id ) INTO @DATA(lv_max_travelid).

    MODIFY ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
           ENTITY zr_travel_mehdi_d
           UPDATE FIELDS ( TravelID )
           WITH VALUE #( FOR ls_travel IN lt_travels INDEX INTO lv_index
                         ( %tky     = ls_travel-%tky
                           TravelID = lv_max_travelid + lv_index ) ).
  ENDMETHOD.

  METHOD validateCustomer.
    READ ENTITIES OF zr_travel_mehdi_d IN LOCAL MODE
         ENTITY zr_travel_mehdi_d
         FIELDS ( CustomerID )
         WITH CORRESPONDING #( keys )
         RESULT DATA(lt_travels).

    DATA lt_customers TYPE SORTED TABLE OF /dmo/customer WITH UNIQUE KEY customer_id.

    " Optimization of DB select: extract distinct non-initial customer IDs
    lt_customers = CORRESPONDING #( lt_travels DISCARDING DUPLICATES MAPPING customer_id = CustomerID EXCEPT * ).
    DELETE lt_customers WHERE customer_id IS INITIAL.

    IF lt_customers IS NOT INITIAL.
      " Check if customer ID exists
      SELECT FROM /dmo/customer
        FIELDS customer_id
        FOR ALL ENTRIES IN @lt_customers
        WHERE customer_id = @lt_customers-customer_id
        INTO TABLE @DATA(lt_valid_customers).
    ENDIF.

    " Raise message for non existing customer id
    LOOP AT lt_travels INTO DATA(travel).

      APPEND VALUE #( %tky        = travel-%tky
                      %state_area = 'VALIDATE_CUSTOMER' )
             TO reported-zr_travel_mehdi_d.

      IF travel-CustomerID IS INITIAL.
        APPEND VALUE #( %tky = travel-%tky ) TO failed-zr_travel_mehdi_d.

        APPEND VALUE #( %tky                = travel-%tky
                        %state_area         = 'VALIDATE_CUSTOMER'
                        %msg                = NEW /dmo/cm_flight_messages(
                                                      textid   = /dmo/cm_flight_messages=>enter_customer_id
                                                      severity = if_abap_behv_message=>severity-error )
                        %element-CustomerID = if_abap_behv=>mk-on )
               TO reported-zr_travel_mehdi_d.

      ELSEIF travel-CustomerID IS NOT INITIAL AND NOT line_exists( lt_valid_customers[
                                                                       customer_id = travel-CustomerID ] ).
        APPEND VALUE #( %tky = travel-%tky ) TO failed-zr_travel_mehdi_d.

        APPEND VALUE #( %tky                = travel-%tky
                        %state_area         = 'VALIDATE_CUSTOMER'
                        %msg                = NEW /dmo/cm_flight_messages(
                                                      customer_id = travel-customerid
                                                      textid      = /dmo/cm_flight_messages=>customer_unkown
                                                      severity    = if_abap_behv_message=>severity-error )
                        %element-CustomerID = if_abap_behv=>mk-on )
               TO reported-zr_travel_mehdi_d.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.

  METHOD Activate.
  ENDMETHOD.

  METHOD Discard.
  ENDMETHOD.

  METHOD Edit.
  ENDMETHOD.

  METHOD Resume.
  ENDMETHOD.
ENDCLASS.
